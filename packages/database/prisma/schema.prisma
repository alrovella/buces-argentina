// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  price       Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  inStock     Boolean        @default(true)
  isNew       Boolean        @default(true)
  keywords    String?
  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  saleItems   SaleItem[]
  deleted     Boolean        @default(false)
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model DiscountCoupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  validUntil DateTime
  Sale       Sale[]
}

model Sale {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  subTotal         Float
  shippingCost     Float
  total            Float
  paymentFee       Float
  paymentId        String          @unique
  discountCouponId Int?
  userId           Int
  discountCoupon   DiscountCoupon? @relation(fields: [discountCouponId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  saleItems        SaleItem[]
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  price     Float
  quantity  Int
  total     Float
  sale      Sale?   @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId    Int?
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model User {
  id         Int       @id @default(autoincrement())
  clerkId    String    @unique
  firstName  String?
  lastName   String?
  email      String
  phone      String?
  address    String?
  city       String?
  zipCode    String?
  comments   String?
  provinceId Int?
  province   Province? @relation(fields: [provinceId], references: [id])
  sales      Sale[]
  role       UserRole  @default(USER)
}

enum UserRole {
  USER
  ADMIN
}

model Province {
  id           Int    @id @default(autoincrement())
  name         String
  shippingCost Float
  User         User[]
}
